plugins {
    id "org.sonarqube" version "3.0"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.vladmihalcea:hibernate-types-55:2.21.1'

    // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // mongodb
    implementation 'org.springframework.data:spring-data-mongodb'
    implementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.6.0'

    // mysql
    implementation 'mysql:mysql-connector-java:8.0.33'

    // websocket, stomp, etc
    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.webjars:sockjs-client:1.0.2'
    implementation 'org.webjars:stomp-websocket:2.3.3'
    implementation 'org.webjars:bootstrap:3.3.7'
    implementation 'org.webjars:jquery:3.1.1-1'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-collections'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.4'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

/**
 * QueryDsl config
 */
// QClass를 저장할 경로
def generated = "$buildDir/generated/querydsl"

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// build 할 때 사용할 sourceSet에 QClass를 추가
sourceSets {
    main.java.srcDir generated
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
